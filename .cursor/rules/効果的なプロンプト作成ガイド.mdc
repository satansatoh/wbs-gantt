---
description: 
globs: 
alwaysApply: true
---
# 効果的なプロンプト作成ガイド

## プロンプトの概要

このドキュメントは、AIアシスタントを使う際に有効なプロンプトを作成するためのガイドです。よく練られたプロンプトは、得られる回答の質や関連性を大きく向上させます。

## 効果的なプロンプトの重要要素

### 明確かつ具体的にする
- 要求内容を明確に述べる
- 関連するコンテキストや背景情報を含める
- 回答を求める形式を指定する
- 制約や要件があれば明記する

### コンテキストを提供する
- なぜその情報が必要なのかを説明
- 関連する背景知識を共有
- 以前の試みがあれば言及
- トピックに対する自身の理解度を示す

### リクエストを構造化する
- 複雑なリクエストは小さなパートに分割
- 複数の質問がある場合は番号付きリストを活用
- 優先度がある場合は明示的に伝える
- 見出しやセクションで整理することを検討

### 出力形式を指定する
- 回答の長さ（簡潔か詳細か）を明示
- 箇条書き、段落、表など、特定の形式を要求
- コード例や引用、特別な要素が必要かどうかの指定
- 関連する場合はトーンやスタイル（フォーマル、会話調、技術的など）を指示

## プロンプト例

### 悪い例:
"機械学習について教えて。"

### よい例:
"私はコンピュータサイエンスの学生で、初めての機械学習プロジェクトに取り組んでいます。画像認識における実用的な応用にフォーカスして、教師あり学習アルゴリズムについて2〜3段落で説明してもらえますか？具体的なアルゴリズムを2〜3つ挙げ、それぞれの強みと弱みを解説してください。"

### 悪い例:
"ウェブサイトを作るコードを書いて。"

### よい例:
"個人のポートフォリオサイトにシンプルな問い合わせフォームを作りたいです。名前、メールアドレス、メッセージのフィールドを集めるHTML、CSS、JavaScriptのコードを書いてもらえますか？フォーム送信前にバリデーションを行い、青と白を基調にしたミニマルデザインにしてください。"

## 反復的なプロンプト作成

AIアシスタントとのやり取りは反復的なプロセスであることが多いです。

1. 初期のプロンプトを作成
2. 応答を確認
3. 不十分または不足している部分に基づいてプロンプトを改良
4. 会話を継続し、トピックをさらに深掘り

## コードを求める場合

コード例を依頼する場合は、以下を検討してください:

- 使用するプログラミング言語とバージョン
- ライブラリやフレームワーク
- エラーメッセージがある場合は具体的に提示
- 入力例／出力例
- パフォーマンスに関する考慮
- 互換性の要件

## 結論

効果的なプロンプト作成は、実践を積むにつれて身につくスキルです。明確さ、具体性、コンテキストの提供を意識することで、AIアシスタントからより有用で関連性の高い回答を得ることができます。初回の回答でニーズを完全に満たせない場合でも、プロンプトの修正を重ねることで、最終的に目的に合った回答を引き出すことができます。

